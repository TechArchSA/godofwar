#!/usr/bin/env ruby
#
# GodOfWare - A command-line tool to generate war payloads for penetration testing / red teaming purposes.
# @Author: KING SABRI - @KINGSABRI
#
lib = File.dirname(__FILE__) + '/../lib'
war = File.dirname(__FILE__) + '/../payloads'
if File.directory?(lib)
  unless $:.include?(lib)
    $:.unshift(lib)
    $:.unshift(war)
  end
end
require 'godofwar'

def banner
  <<~BANNER
                                                         `           
                                                        :hho/.`      
                                                       -hdddddhs/.   
                                                      .hddddddddy`   
                                                     .hddddddddh.    
                                                    `yddddddddh.     
                                                   `sddddddddh-      
                                                  `sddddddddd:       
                                                  oddddddddd:        
                                                 +ddddddddd/         
                                      `o-       /ddddddddd+          
                                     .y+       /dddddddddo`          
                                    .h/       :dddddddddd+`          
                            .      .h/       `yddddddddddd+`         
                           `dy/.  `y+         /ddddddddddddo`  `....`
                            hMMNy+ss          `yddddddddddddo:ohmNNNs
                            +MMMMMMd+-`        /dddddmmmmNNMMMMMMMMm/
                            +MMMMMMMMNdo:`     +MNNNMMMMMMMMNmNMMMm.
                          `oMMNosMMMmdNMMNy:/.`/omMMMMNomMMN+`/NMNo
                         .hMMMms+ydh+/yNNNNs:    `yNMMo+odmhydMMN+ 
                         /+//::m/-:////:--+ `      ./NMMMMMMMMNmds 
                              +y          ` o.  .`   `:yNNmmmddddd+
                             `m-            d-  hs     `ydddddddddd: 
                             /h        :yy/`h  .omy: -` .hdddddddddh.
                             h/       /h-.:o-    +y  -h/ -ddddddddddy
                            `m`       /`o/  `    `` .`.d+ /dddddho:.`
                            -m         .+dyo`     .ys` `o+`+dddd-    
                            .+          .+s:///::`-.     `  ydds     
                                          `` ````           +dd-     
                                      -:-.`        `.`      -do      
                                     /NNddddhysyhddddm/     `h.      
                                   `odo-``..:/o+:-.../h+`    -
                                   :-`   ---------.   `:/`    
                                        `NNNNNNNNNN     ``    
                                        `NNNNMMMMNN       
                                         ----hMMs-.       
                                            `hMM+          ``
                                 `-..```  ./hMMM/ ``   `.:oh-
                                 .ymmddhhymMMMMMyyds.:shmMMo 
                                  `sNMMMMMMMMMMMMMMMNMMMMMy` 
                                    /NMMMMMMMMMMMMMMMMMMMm.  
                                     -dMMMMMMMMMMMMMMMMNm:   
                                      .yMMMMMMMMMMMMMMo-`    
                                       `oNMMMMMMMMMMNNy      
                                         :+NMMNNmho/-`       
                                             /o/-`
                                                                                  

  BANNER
end

include GodOfWar
include GodOfWar::Builder
payload = GodOfWar::Payloads.new

options = {}
option_parser = OptionParser.new
option_parser.banner = "#{"GodOfWar".bold} - Malicious Java WAR builder."
option_parser.set_summary_indent '   '
option_parser.separator "\nHelp menu:".underline
option_parser.on('-g', '--generate PAYLOAD',
                 payload.payloads,
                 'Generates war from one of the available payloads'
) {|v| options[:payload] = v}

option_parser.on('-H', '--HOST IP_ADDR',
                 'Local or Remote IP address for the chosen payload.(used with -g/--generate)'
) {|v| options[:host] = v}
option_parser.on('-P', '--port PORT', Integer,
                 'Local or Remote Port for the chosen payload.(used with -g/--generate)'
) {|v| options[:port] = v}
option_parser.on('-v', '--version', 'Check current and latest version') { latest_version}
option_parser.on('-h', '--help', 'Show this help message') {puts banner , option_parser; exit!}


# godofwar -g revers_shell -l 1.1.1.1 -p 8080


begin
  option_parser.parse!
  case
    when options[:version]
      puts "[+] ".dark_green + "Current Version:"
      puts GodOfWar::VERSION
      if latest_version == GodOfWar::VERSION
        puts "You have latest version."
      else
        puts "[+] ".dark_green + "Latest version:"
        puts latest_version
        puts "[!] ".yellow + "Please update. (gem update godofwar)"
      end

    else
      puts banner
      puts option_parser
  end
rescue OptionParser::MissingArgument => e
  e.args.each {|arg| puts '[!] '.red + "#{e.reason.capitalize} for '#{arg}' option."}
  puts option_parser
rescue OptionParser::InvalidOption => e
  puts '[!] '.red + "#{e}"
  puts option_parser
rescue Exception => e
  puts "[x] ".red + "Unknown Exception: option parser"
  puts '[!] '.yellow + 'Please report the issue at: https://github.com/KINGSABRI/jwtear/issues'.underline
  puts e.backtrace_locations
  puts e
end